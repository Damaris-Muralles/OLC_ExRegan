
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Errores.Excepcion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\011\000" +
    "\002\006\003\000\002\006\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\010" +
    "\003\000\002\010\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\020\002\000\002\011\005\000\002\011\003" +
    "\000\002\012\007\000\002\014\004\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\013\006\000\002\017\003" +
    "\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\004\005\004\001\002\000\010\004\015\015" +
    "\013\027\016\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\012\004\ufffd\006\ufffd\015\ufffd\027" +
    "\ufffd\001\002\000\012\004\ufffa\006\ufffa\015\ufffa\027\ufffa" +
    "\001\002\000\012\004\ufffc\006\ufffc\015\ufffc\027\ufffc\001" +
    "\002\000\012\004\ufffe\006\ufffe\015\ufffe\027\ufffe\001\002" +
    "\000\012\004\ufffb\006\ufffb\015\ufffb\027\ufffb\001\002\000" +
    "\012\004\015\006\144\015\013\027\016\001\002\000\004" +
    "\011\044\001\002\000\006\011\020\013\017\001\002\000" +
    "\004\012\025\001\002\000\006\030\023\031\021\001\002" +
    "\000\004\010\uffc7\001\002\000\004\010\024\001\002\000" +
    "\004\010\uffc8\001\002\000\012\004\uffc9\006\uffc9\015\uffc9" +
    "\027\uffc9\001\002\000\022\005\035\016\034\017\032\020" +
    "\031\021\033\022\030\030\026\031\037\001\002\000\024" +
    "\005\uffcb\010\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\030\uffcb\031\uffcb\001\002\000\024\005\035\010\042" +
    "\016\034\017\032\020\031\021\033\022\030\030\026\031" +
    "\037\001\002\000\024\005\uffcd\010\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\030\uffcd\031\uffcd\001\002\000" +
    "\024\005\uffcf\010\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\030\uffcf\031\uffcf\001\002\000\024\005\uffd0\010" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\030\uffd0" +
    "\031\uffd0\001\002\000\024\005\uffce\010\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\030\uffce\031\uffce\001\002" +
    "\000\024\005\uffd1\010\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\030\uffd1\031\uffd1\001\002\000\004\027\040" +
    "\001\002\000\024\005\uffd2\010\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\030\uffd2\031\uffd2\001\002\000\024" +
    "\005\uffca\010\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\030\uffca\031\uffca\001\002\000\004\006\041\001\002" +
    "\000\024\005\uffcc\010\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\030\uffcc\031\uffcc\001\002\000\012\004\uffd4" +
    "\006\uffd4\015\uffd4\027\uffd4\001\002\000\024\005\uffd3\010" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\030\uffd3" +
    "\031\uffd3\001\002\000\004\027\045\001\002\000\004\013" +
    "\046\001\002\000\004\012\047\001\002\000\042\005\052" +
    "\006\050\007\061\010\071\011\062\012\064\013\054\016" +
    "\074\017\067\020\073\021\070\022\056\023\053\024\057" +
    "\025\063\026\060\001\002\000\010\007\uffdd\010\uffdd\014" +
    "\ufff0\001\002\000\004\014\126\001\002\000\010\007\uffde" +
    "\010\uffde\014\ufff1\001\002\000\010\007\uffe2\010\uffe2\014" +
    "\124\001\002\000\010\007\uffdf\010\uffdf\014\ufff2\001\002" +
    "\000\004\010\ufff8\001\002\000\010\007\uffd5\010\uffd5\014" +
    "\uffe9\001\002\000\010\007\uffe3\010\uffe3\014\122\001\002" +
    "\000\010\007\uffe0\010\uffe0\014\uffe8\001\002\000\006\010" +
    "\uffe6\014\uffe6\001\002\000\010\007\uffdc\010\uffdc\014\uffef" +
    "\001\002\000\010\007\uffe1\010\uffe1\014\120\001\002\000" +
    "\010\007\uffdb\010\uffdb\014\uffee\001\002\000\006\007\100" +
    "\010\uffe5\001\002\000\004\010\077\001\002\000\010\007" +
    "\uffd9\010\uffd9\014\uffec\001\002\000\006\010\uffea\014\uffea" +
    "\001\002\000\006\014\uffe7\021\uffd7\001\002\000\004\010" +
    "\ufff7\001\002\000\010\007\uffd8\010\uffd8\014\uffeb\001\002" +
    "\000\010\007\uffda\010\uffda\014\uffed\001\002\000\004\021" +
    "\076\001\002\000\006\007\uffd6\010\uffd6\001\002\000\012" +
    "\004\ufff9\006\ufff9\015\ufff9\027\ufff9\001\002\000\036\005" +
    "\117\006\116\010\101\011\111\012\107\013\110\016\114" +
    "\017\106\020\105\022\103\023\113\024\102\025\104\026" +
    "\112\001\002\000\004\021\uffd7\001\002\000\006\007\uffe3" +
    "\010\uffe3\001\002\000\006\007\uffd5\010\uffd5\001\002\000" +
    "\006\007\uffe1\010\uffe1\001\002\000\006\007\uffd8\010\uffd8" +
    "\001\002\000\006\007\uffd9\010\uffd9\001\002\000\006\007" +
    "\uffdb\010\uffdb\001\002\000\006\007\uffdf\010\uffdf\001\002" +
    "\000\006\007\uffdc\010\uffdc\001\002\000\006\007\uffe0\010" +
    "\uffe0\001\002\000\006\007\uffe2\010\uffe2\001\002\000\006" +
    "\007\uffda\010\uffda\001\002\000\004\010\uffe4\001\002\000" +
    "\006\007\uffdd\010\uffdd\001\002\000\006\007\uffde\010\uffde" +
    "\001\002\000\004\025\121\001\002\000\004\010\ufff4\001" +
    "\002\000\004\024\123\001\002\000\004\010\ufff6\001\002" +
    "\000\004\023\125\001\002\000\004\010\ufff5\001\002\000" +
    "\034\005\142\006\141\007\061\010\127\011\136\012\135" +
    "\013\134\016\140\017\132\020\131\021\070\022\130\026" +
    "\137\001\002\000\004\010\uffe7\001\002\000\004\010\uffe9" +
    "\001\002\000\004\010\uffeb\001\002\000\004\010\uffec\001" +
    "\002\000\004\010\ufff3\001\002\000\004\010\ufff2\001\002" +
    "\000\004\010\uffee\001\002\000\004\010\uffef\001\002\000" +
    "\004\010\uffe8\001\002\000\004\010\uffed\001\002\000\004" +
    "\010\ufff0\001\002\000\004\010\ufff1\001\002\000\012\004" +
    "\uffff\006\uffff\015\uffff\027\uffff\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\004\002\004\001\001\000\014\003\013\004" +
    "\011\005\006\012\010\013\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\142\005\006\012\010\013\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\026\015\035\001\001" +
    "\000\002\001\001\000\004\015\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\065\007\054\010\071" +
    "\011\064\016\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\114\011\064\001\001\000\004\020\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Lista de erress
    public ArrayList<Excepcion> Errores = new ArrayList();

    
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
    } 
    
   
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }  

    //lista de datos
    public List<String> conjuntos = new ArrayList<String>();
    public List<String> expresion = new ArrayList<String>();
    public List<String> lexema = new ArrayList<String>();
    public List filas  = new ArrayList();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= LLAVA lenguajes LLAVC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lenguajes ::= lenguajes lenguaje 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lenguajes",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lenguajes ::= lenguaje 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lenguajes",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lenguaje ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lenguaje",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lenguaje ::= expresiones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lenguaje",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lenguaje ::= SPORCENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lenguaje",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lenguaje ::= lexemas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lenguaje",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= DCONJ PP IDTEXT GUION MAYOR notacion PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int conjleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int conjright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object conj = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
       
        //Inserto en la lista el resultado de la expresión evaluada
        conjuntos.add(id);
        conjuntos.add((String)conj);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // notacion ::= rangoconj 
            {
              Object RESULT =null;
		int rangoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rangoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object rango = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=rango;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("notacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // notacion ::= listaconj 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("notacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // rangoconj ::= ALFAMINUS ONDGUION ALFAMINUS 
            {
              Object RESULT =null;
		int mi1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mi1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String mi1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int gi1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gi1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String gi1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mi2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mi2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mi2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=mi1+gi1+mi2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rangoconj",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rangoconj ::= ALFAMAYUS ONDGUION ALFAMAYUS 
            {
              Object RESULT =null;
		int ma1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ma1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ma1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int gi2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gi2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String gi2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ma2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ma2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ma2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ma1+gi2+ma2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rangoconj",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rangoconj ::= NUMEROS ONDGUION NUMEROS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int gi3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gi3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String gi3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=num+gi3+num1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rangoconj",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rangoconj ::= elementorango ONDGUION elementorango 
            {
              Object RESULT =null;
		int tesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tes = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int gi4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gi4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String gi4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int es1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String es1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=tes+gi4+es1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rangoconj",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // elementorango ::= GUION 
            {
              String RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=g1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elementorango ::= LLAVA 
            {
              String RESULT =null;
		int ab1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ab1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ab1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ab1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elementorango ::= LLAVC 
            {
              String RESULT =null;
		int lc1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lc1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String lc1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lc1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elementorango ::= PP 
            {
              String RESULT =null;
		int ppp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ppp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ppp1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ppp1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elementorango ::= MAYOR 
            {
              String RESULT =null;
		int mmm1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mmm1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mmm1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=mmm1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elementorango ::= CPOSITIVA 
            {
              String RESULT =null;
		int mas31left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mas31right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mas31 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=mas31;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elementorango ::= CKLEENE 
            {
              String RESULT =null;
		int por31left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int por31right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String por31 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=por31;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elementorango ::= CONCATENAR 
            {
              String RESULT =null;
		int p31left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int p31right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String p31 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=p31;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elementorango ::= DISYUNCION 
            {
              String RESULT =null;
		int b31left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int b31right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b31 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=b31;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elementorango ::= CBOOL 
            {
              String RESULT =null;
		int inte31left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int inte31right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String inte31 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=inte31;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elementorango ::= CESPECIAL 
            {
              String RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String es = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=es;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elementorango ::= PCOMA 
            {
              String RESULT =null;
		int pc9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pc9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String pc9 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=pc9;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elementorango ::= COMA 
            {
              String RESULT =null;
		int c9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c9 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=c9;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementorango",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaconj ::= elemento 
            {
              Object RESULT =null;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=elem;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaconj",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaconj ::= elemento COMA listaconj 
            {
              Object RESULT =null;
		int elem1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int elem1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object elem1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int list1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int list1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object list1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=elem1+coma+list1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaconj",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elemento ::= ALFAMINUS 
            {
              Object RESULT =null;
		int mi3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mi3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mi3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=mi3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elemento ::= ALFAMAYUS 
            {
              Object RESULT =null;
		int ma3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ma3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ma3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ma3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elemento ::= NUMEROS 
            {
              Object RESULT =null;
		int num3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=num3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // elemento ::= CESPECIAL 
            {
              Object RESULT =null;
		int es3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int es3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String es3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=es3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elemento ::= GUION 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=g;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elemento ::= LLAVA 
            {
              Object RESULT =null;
		int ableft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int abright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ab = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ab;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elemento ::= LLAVC 
            {
              Object RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lc;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elemento ::= PP 
            {
              Object RESULT =null;
		int pppleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pppright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ppp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ppp;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elemento ::= MAYOR 
            {
              Object RESULT =null;
		int mmmleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mmmright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mmm = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=mmm;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elemento ::= CPOSITIVA 
            {
              Object RESULT =null;
		int mas3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mas3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mas3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=mas3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elemento ::= CKLEENE 
            {
              Object RESULT =null;
		int por3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int por3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String por3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=por3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elemento ::= CONCATENAR 
            {
              Object RESULT =null;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=p3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$0 ::= 
            {
              Object RESULT =null;
		int pc8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pc8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String pc8 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT=pc8;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elemento ::= PCOMA NT$0 DISYUNCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int pc8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pc8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pc8 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int b3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int b3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=b3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elemento ::= CBOOL 
            {
              Object RESULT =null;
		int inte3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int inte3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String inte3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=inte3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresiones ::= IDTEXT GUION MAYOR exreg PCOMA 
            {
              Object RESULT =null;
		int idexleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idexright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String idex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int reg1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int reg1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String reg1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    
        //Inserto en la lista el resultado de la expresión evaluada
        
        expresion.add(idex);
        expresion.add(reg1);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exreg ::= exreg otraexreg 
            {
              String RESULT =null;
		int reg2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int reg2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String reg2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int otleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int otright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ot = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=reg2+ot;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exreg",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exreg ::= otraexreg 
            {
              String RESULT =null;
		int ot1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ot1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ot1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ot1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exreg",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // otraexreg ::= CPOSITIVA 
            {
              String RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=mas;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otraexreg",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // otraexreg ::= CKLEENE 
            {
              String RESULT =null;
		int porleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int porright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String por = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=por;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otraexreg",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // otraexreg ::= CONCATENAR 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=p;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otraexreg",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // otraexreg ::= DISYUNCION 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otraexreg",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // otraexreg ::= CBOOL 
            {
              String RESULT =null;
		int inteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int interight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String inte = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=inte;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otraexreg",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // otraexreg ::= LLAVA IDTEXT LLAVC 
            {
              String RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String la = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int conj1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int conj1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String conj1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=la+conj1+lc;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otraexreg",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // otraexreg ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otraexreg",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // otraexreg ::= INDIV 
            {
              String RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ind = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                        if ((!ind.equals("\".\""))&&(!ind.equals("\"+\""))&&(!ind.equals("\"|\""))&&(!ind.equals("\"*\""))&&(!ind.equals("\"?\""))&&(!ind.equals("\"{\""))&&(!ind.equals("\"}\""))&&(!ind.equals("\\\""))){
                                            ind=ind.replace("\"","");
                                        }
                                        RESULT=ind;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otraexreg",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lexemas ::= IDTEXT PP otrolex PCOMA 
            {
              Object RESULT =null;
		int idex1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idex1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String idex1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    
        //Inserto en la lista el resultado de la expresión evaluadaÇ
        lexema.add(idex1 );
        lexema.add(ev);
        filas.add(idex1);
        filas.add(((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left);

    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lexemas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // otrolex ::= CADENA 
            {
              String RESULT =null;
		int cad8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cad8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad8 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=cad8;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otrolex",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // otrolex ::= INDIV 
            {
              String RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ind1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=ind1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("otrolex",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
